[project]
name = "athena-protobufs"
version = "1.0.0"
description = "Protocol Buffer definitions and documentation for Athena CSAM Detection API"
authors = [{ name = "Crisp", email = "support@crispthinking.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
]

dependencies = [
    # Sphinx documentation dependencies
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",

    # Extensions for enhanced documentation
    "sphinx-autobuild>=2021.3.14",
    "sphinxcontrib-spelling>=8.0.0",

    # Protocol buffer support
    "protobuf>=4.0.0",
    "grpcio>=1.50.0",
    "grpcio-tools>=1.50.0",
]

[project.optional-dependencies]
dev = [
    # Development and testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",

    # Code formatting and linting
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
]

test = ["pytest>=7.0.0", "pytest-asyncio>=0.21.0", "pytest-cov>=4.0.0"]

docs = [
    # Additional documentation tools
    "sphinx-design>=0.5.0",
    "sphinx-copybutton>=0.5.0",
    "furo>=2023.0.0",
]

[project.urls]
Homepage = "https://github.com/crispthinking/athena-protobufs"
Documentation = "https://crispthinking.github.io/athena-protobufs"
Repository = "https://github.com/crispthinking/athena-protobufs"
Issues = "https://github.com/crispthinking/athena-protobufs/issues"

[tool.black]
target-version = ['py38']
line-length = 88
skip-string-normalization = true
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | docs/_build
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
skip_gitignore = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
source = ["."]
omit = ["*/tests/*", "*/test_*", "*/_build/*", ".venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
